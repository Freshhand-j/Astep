#! /bin/bash

####################################################
#
#	AUTHOR:WangWeiJian
#	DESCRIPTION:install and deploy ShadowsocksR
#	STUDENTID:3017216142
#	VERSION:1.0.0.20191010_Mini_Alpha
#	
####################################################	


#版本
version="1.1.0.20191111_Mini_Alpha"

#显示的字体颜色定义
blue="\033[1;36m"
green="\033[1;32m"
yellow="\033[1;33m"
red="\033[1;31m"
suffix="\033[0m"



#配置文件目录
ssr_folder="/usr/local/shadowsocksr"
ssr_ss_file="${ssr_folder}/shadowsocks"
config_file="${ssr_folder}/config.json"
config_folder="/etc/shadowsocksr"
config_user_file="${config_folder}/user-config.json"
ssr_log_file="${ssr_ss_file}/ssserver.log"
jq_file="${ssr_folder}/jq"
ssr_manage_file="/etc/init.d/ssr"
ssr_log_file="${ssr_ss_file}/ssserver.log"


#---------------------暂时测试目录------------------------------
#ssr_floder="/home/wwj/Documents/opensource/simu"
#ssr_ss_file="${ssr_folder}/shadowsocks"
#config_file="${ssr_folder}/config"
#config_folder="/home/wwj/Documents/opensource/simu/shadowsocksr"
#config_user_file="${config_folder}/user-config.json"
#ssr_log_file="${ssr_ss_file}/ssserver.log"
#-----------------------------------------------------------


#提示信息体定义
INFO="${green}[Info ] "
ERROR="${red}[Error] "
NOTICE="${yellow}[Notice] "

#定义分割符
Separator_1="-------------------"



#检查是否为root用户 执行此脚本需要root权限
function Check_root(){	
	if [ ${EUID} != 0 ];then
		echo -e "${NOTICE}Permisson denied!\n	 Please switch to root and retry${suffix}" && exit 1
	else
		echo -e "${INFO}User root${suffix}"
	fi
}



#检查系统型号，暂时仅支持ubuntu系统
function Check_sys(){
	if cat /etc/issue | grep -q -E -i "ubuntu";then
		release="ubuntu"
		#test
		#echo -e "${release}"
	else
		echo -e "${ERROR}only for ubuntu${suffix}"
	fi
	bit=`uname -m`
}




#
function Check_pid(){
	PID=`ps -ef | grep -v grep | grep server.py | awk '{print $2}'`
	#test
	#echo -e "${PID}"
}



#安装信息检测，配置文件是否存在。
function SSR_installation_status(){
	[ ! -e ${config_user_file} ] && echo -e "${red}ShadowsocksR configuration file not found!${suffix}"
	#[[ -e ${config_user_file} ]] && echo "Confiuration file found!"
	[ ! -e $ssr_folder ] && echo -e "${red}ShadowsocksR configuration file not found!${suffix}"
}

#-------------------------------------设置防火墙规则------------------------------------
function Add_iptables(){
	iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${ssr_port} -j ACCEPT
	iptables -I INPUT -m state --state NEW -m udp -p udp --dport ${ssr_port} -j ACCEPT
	ip6tables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${ssr_port} -j ACCEPT
	ip6tables -I INPUT -m state --state NEW -m udp -p udp --dport ${ssr_port} -j ACCEPT
}


#保存防火墙规则
function Save_iptables(){
	iptables-save > /etc/iptables.up.rules
	iptables-save > /etc/ip6tables.up.rules
	echo -e '#!/bin/bash\n
		/sbin/iptables-restore < /etc/iptables.up.rules\n
		/sbin/ip6tables-restore < /etc/ip6tables.up.rules' > /etc/network/if-pre-up.d/iptables
	chmod +x /etc/network/if-pre-up.d/iptables
}

#删除防火墙规则
function Del_iptables(){
	iptables -D INPUT -m state --state NEW -m udp -p udp --dport ${port} -j ACCEPT
	iptables -D INPUT -m state --state NEW -m udp -p udp --dport ${port} -j ACCEPT
	ip6tables -D INPUT -m state --state NEW -m udp -p udp --dport ${port} -j ACCEPT
	ip6tables -D INPUT -m state --state NEW -m udp -p udp --dport ${port} -j ACCEPT
}


function Set_iptables(){
	iptables-save > /etc/iptables.up.rules
	ip6tables-save > /etc/ip6tables.up.rules
	echo -e '#!/bin/bash\n/sbin/iptables-restore < /etc/iptables.up.rules\n/sbin/ip6tables-restore < /etc/ip6tables.up.rules' > /etc/network/if-pre-up.d/iptables
	chmod +x /etc/network/if-pre-up.d/iptables
}
#-------------------------------------------------------------------------------------
















#查询公网ip地址
function Get_ip(){
	ip=$(wget -qO- -t1 -T2 ipinfo.io/ip)
}


#对config.json进行解析处理,输出想要的结果
#只使用jq解析，将输出代颜色与引号的字符串
# sed 's/^.//'删除前半部分
# sed 's/.$//'删除后半部分
function Get_user(){
	[[ ! -e ${jq_file} ]] && echo -e "${ERROR}JQ analyzer doesn't exist!${suffix}"
	port=`${jq_file} '.server_port' ${config_user_file}`
	password=`${jq_file} '.password' ${config_user_file} | sed 's/^.//;s/.$//'`
	method=`${jq_file} '.method' ${config_user_file} | sed 's/^.//;s/.$//g'`
	protocol=`${jq_file} '.protocol' ${config_user_file} | sed 's/^.//;s/.$//g'`
	obfs=`${jq_file} '.obfs' ${config_user_file} | sed 's/^.//;s/.$//g'`
	protocol=`${jq_file} '.protocol' ${config_user_file} | sed 's/^.//;s/.$//g'`
	speed_limit_per_con=`${jq_file} '.speed_limit_per_con' ${config_user_file}`
	speed_limit_per_user=`${jq_file} '.speed_limit_per_user' ${config_user_file}`
	connect_verbose_info=`${jq_file} '.connect_verbose_info' ${config_user_file}`
}


#对设置信息进行编码处理
function urlsafe_base64(){
	link=$(echo -n "$1"|base64|sed ':a;N;s/\n/ /g;ta'|sed 's/ //g;s/=//g;s/+/-/g;s/\//_/g' )
	echo "${link}"
}

#设置ss连接
function ss_link(){
	SSbase64=$(urlsafe_base64 "${method}:${password}@${ip}:${port}")
	SSurl="ss://${SSbase64}"

}


#显示设置信息
function View_User(){
	SSR_installation_status
	Get_ip
	Get_user
	ss_link
	echo -e "==========================================" &&
	echo -e "${red}ShadowsocksR Account Configuration Infomation${suffix}" &&
	echo -e "I  P\t\t:	${blue}${ip}${suffix}" &&
	echo -e "Port \t\t:	${blue}${port}${suffix}" &&
	echo -e "Password\t:	${blue}${password}${suffix}" &&
	echo -e "Method\t\t:	${blue}${method}${suffix}" &&
	echo -e "Protocol\t:	${blue}${protocol}${suffix}" && 
	echo -e "Obfs\t\t:	${blue}${obfs}${suffix}" && 
	echo -e "SS_link\t\t:	${blue}${SSurl}${suffix}"
	echo -e "=========================================="
}

#设置端口
function Set_config_port(){
	clear
	while true
	do
	echo
	echo
	read -e -p "Enter a ShadowsocksR Prot (default:6626):" ssr_port
	if [[ -z "${ssr_port}" ]]; then
	ssr_port="6626"
	fi
	# $? biaoshi wenben
	if [[ $? == 0 ]]; then
		if [[ ${ssr_port} -ge 1 ]] && [[ ${ssr_port} -le 65535 ]]; then
			echo ${Separator_1} && echo -e "${green}Port${suffix} : ${blue}${ssr_port}${suffix}" && echo ${Separator_1}
			break
		else
			echo -e "${ERROR}Please enter a correct number(1-65535)${suffix}"
		fi
	else
		echo -e "${ERROR}Please enter a correct number(1-65535)${suffix}"
	fi
	done
}

#设置密码
function Set_config_password(){
	echo
	echo
	read -e -p "Enter ShadowsocksR Password (default:wwjdsb):" ssr_password
	[[ -z "${ssr_password}" ]] && ssr_password="wwjdsb"
	echo && echo "${Separator_1}" && echo -e "${green}Password${suffix}:${blue}${ssr_password}${suffix}" && echo ${Separator_1} && echo
}


#加密方式
function Set_config_method(){

		echo
		echo

		echo -e "Set ShadowsocksR Method"
		
		echo
		echo
	
		echo -e "${green}1.${suffix}none"
		echo -e "${green}2.${suffix}rc4"
		echo -e "${green}3.${suffix}rc4-md5"
		echo -e "${green}4.${suffix}rc4-md5-6"

		echo -e "${green}5.${suffix}aes-128-ctr"
		echo -e "${green}6.${suffix}aes-192-ctr"
		echo -e "${green}7.${suffix}aes-256-ctr"

		echo -e "${green}8.${suffix}aes-128-cfb"
		echo -e "${green}9.${suffix}aes-192-cfb"
		echo -e "${green}10.${suffix}aes-256-cfb"

		echo -e "${green}11.${suffix}aes-128-cfb8"
		echo -e "${green}12.${suffix}aes-192-cfb8"
		echo -e "${green}13.${suffix}aes-256-cfb8"

		echo
		echo

		read -ep "Enter a number (default: aes-128-ctr):" ssr_method

		[[ -z "${ssr_method}" ]] && ssr_method="5"
		if [[ ${ssr_method} == "1" ]]; then
			ssr_method="none"
		elif [[ ${ssr_method} == "2" ]]; then
			ssr_method="rc4"
		elif [[ ${ssr_method} == "3" ]]; then
			ssr_method="rc4-md5"
		elif [[ ${ssr_method} == "4" ]]; then
			ssr_method="rc4-md5-6"
		elif [[ ${ssr_method} == "5" ]]; then
			ssr_method="aes-128-ctr"
		elif [[ ${ssr_method} == "6" ]]; then
			ssr_method="aes-192-ctr"
		elif [[ ${ssr_method} == "7" ]]; then
			ssr_method="aes-256-ctr"
		elif [[ ${ssr_method} == "8" ]]; then
			ssr_method="aes-128-cfb"
		elif [[ ${ssr_method} == "9" ]]; then
			ssr_method="aes-192-cfb"
		elif [[ ${ssr_method} == "10" ]]; then
			ssr_method="aes-256-cfb"
		elif [[ ${ssr_method} == "11" ]]; then
			ssr_method="aes-128-cfb8"
		elif [[ ${ssr_method} == "12" ]]; then
			ssr_method="aes-192-cfb8"
		elif [[ ${ssr_method} == "13" ]]; then
			ssr_method="aes-256-cfb8"

		else
			ssr_method="aes-128-ctr"
		fi

		echo && echo ${Separator_1} && echo -e "${green}Method${suffix} :${blue}${ssr_method}${suffix}" && echo ${Separator_1} && echo
}




#设置协议插件
function Set_config_protocol(){

	echo
	echo

	echo -e "Set ShadowsocksR Protocol"

	echo
	echo

	echo -e "${green}1.${suffix} auth_sha_v4"
	echo -e "${green}2.${suffix} auth_aes128_md5"
	echo -e "${green}3.${suffix} auth_aes128_sha1"
	echo
	read -e -p "Enter a number (default: auth_sha1_v4):" ssr_protocol
	[[ -z "${ssr_protocol}" ]] && ssr_protocol="1"
	if [[ ${ssr_protocol} == 1 ]]; then 
		#echo -e "${NOTICE}${suffix}"
		ssr_protocol="auth_sha_v4"
	elif [[ ${ssr_protocol} == 2 ]]; then
		echo -e "${NOTICE}Sorry this option isn't open.${suffix}"
		#ssr_protocol="auth_aes123_md5"
	elif [[ ${ssr_protocol} == 3 ]]; then
		echo -e "${NOTICE}Sorry this option isn't open.${suffix}"
		#ssr_protocol="auth_aes128_sha1"
	else
		ssr_ptotocol="auth_sha_v4"
	fi
	read -e -p "Whether the protocol is comatible with original(_compatible)?[Y/n]" ssr_protocol_compatible
	if [[ ${ssr_protocol_compatible} == "n" ]]; then
		echo -e "sorry gaigongnengweikaifang !" && ssr_protocol_compatible="y"
	fi
	[[ -z ${ssr_protocol_compatible} ]] && ssr_protocol_compatible="y"

	echo && echo ${Separator_1} && echo -e "${green}Protocol${suffix} :${blue}${ssr_protocol}${suffix}" && echo -e "${NOTICE}${suffix}${blue}_compatible${suffix}" && echo ${Separator_1}
}



#设置混淆插件
function Set_config_obfs(){
	echo
	echo

	echo -e "Set ShadowsocksR obfs"

	echo
	echo
	
	echo -e "${green}1.${suffix} plain"
	echo -e "${green}2.${suffix} http_simple"
	echo -e "${green}3.${suffix} http_post"
	echo -e "${green}4.${suffix} random_head"
	echo -e "${green}5.${suffix} tls1.2_ticket_auth"

	echo
	read -e -p "Enter a number (default: plain):" ssr_obfs
	[[ -z "${ssr_obfs}" ]] && ssr_obfs="1"
	if [[ ${ssr_obfs} == "2" ]]; then
		echo -e "${NOTICE}Sorry this option isn't open.${suffix}"
	elif [[ ${ssr_obfs} == "3" ]]; then
		echo -e "${NOTICE}Sorry this option isn't open.${suffix}"
	elif [[ ${ssr_obfs} == "4" ]]; then
		echo -e "${NOTICE}Sorry this option isn't open.${suffix}"
	elif [[ ${ssr_obfs} == "5" ]]; then
		echo -e "${NOTICE}Sorry this option isn't open.${suffix}"
	else 
		ssr_obfs="plain"
	fi
	
	read -e -p "Set(_compatible)?[Y/n]" ssr_obfs_compatible

	if [[ ${ssr_obfs_compatible} == "n" ]]; then
		echo -e "${NOTICE}Sorry this option isn't open.${suffix}" && ssr_obfs_compatible="y"
	fi
	[[ -z ${ssr_obfs_compatible} ]] && ssr_obfs_compatible="y"
	echo && echo ${Separator_1} && echo -e "${green}Obfs${suffix} : ${blue}${ssr_obfs}${suffix}" && echo -e "${NOTICE}${blue}_compatible${suffix}" && echo ${Separator_1}

}




#设置 连接设备数量
function Set_config_protocol_param(){
	#设置为无限
	ssr_protocol_param=""
}
#设置限速
function Set_config_speed_limit_per_con(){
	#设置为无限制
	ssr_speed_limit_per_con=0
}
function Set_config_speed_limit_per_user(){
	#无限制
	ssr_speed_limit_per_user=0
}


function Set_all_config(){
	Set_config_port
	Set_config_password
	Set_config_method
	Set_config_protocol
	Set_config_obfs
	Set_config_protocol_param
	Set_config_speed_limit_per_con
	Set_config_speed_limit_per_user
}
#############################

#############################
function Modify_config_port(){
	sed -i 's/"server_port": '"$(echo ${port})"'/"server_port": '"$(echo ${ssr_port})"'/g' ${config_user_file}
}


function Modify_config_password(){
	sed -i 's/"password": "'"$(echo ${password})"'"/"password": "'"$(echo ${ssr_password})"'"/g' ${config_user_file}
}


function Modify_config_method(){
	sed -i 's/"method": "'"$(echo ${method})"'"/"method": "'"$(echo ${ssr_method})"'"/g' ${config_user_file}
}


function Modify_config_protocol(){
	sed -i 's/"protocol": "'"$(echo ${protocol})"'"/"protocol": "'"$(echo ${ssr_protocol})"'"/g' ${config_user_file}
}


function Modify_config_obfs(){
	sed -i 's/"obfs": "'"$(echo ${obfs})"'"/"obfs": "'"$(echo ${ssr_obfs})"'"/g' ${config_user_file}
}


function Modify_config_protocol_param(){
	sed -i 's/"protocol_param": "'"$(echo ${protocol_param})"'"/"protocol_param": "'"$(echo ${ssr_protocol_param})"'"/g' ${config_user_file}
}


function Modify_config_speed_limit_per_con(){
	sed -i 's/"speed_limit_per_con": '"$(echo ${speed_limit_per_con})"'/"speed_limit_per_con": '"$(echo ${ssr_speed_limit_per_con})"'/g' ${config_user_file}
}


function Modify_config_speed_limit_per_user(){
	sed -i 's/"speed_limit_per_user": '"$(echo ${speed_limit_per_user})"'/"speed_limit_per_user": '"$(echo ${ssr_speed_limit_per_user})"'/g' ${config_user_file}
}


function Modify_config_connect_verbose_info(){
	sed -i 's/"connect_verbose_info": '"$(echo ${connect_verbose_info})"'/"connect_verbose_info": '"$(echo ${ssr_connect_verbose_info})"'/g' ${config_user_file}
}



function Modify_config_all(){
	Modify_config_port
	Modify_config_password
	Modify_config_method
	Modify_config_protocol
	Modify_config_obfs
	Modify_config_protocol_param
	Modify_config_speed_limit_per_con
	Modify_config_speed_limit_per_user
}



#修改配置界面
function Modify_config(){
	clear
	SSR_installation_status
	echo && echo -e "\t\tModify Menu"
	echo -e "\t——————————"
	echo -e "${green}\t1.${suffix}Change port"

	echo -e "${green}\t2.${suffix}Change password"

	echo -e "${green}\t3.${suffix}Change method"
	echo -e "\t——————————"
	echo -e "${green}\t4.${suffix}Change protocol"
	echo -e "${green}\t5.${suffix}Change obfs"
	#echo -e "${green}6.${suffix}"
	#echo -e "${green}7.${suffix}"
	#echo -e "${green}8.${suffix}"
	#echo -e "${green}9.${suffix}"
	#echo -e "${green}10.${suffix}"
	#echo -e "${green}11.${suffix}"
	#echo -e "${green}12.${suffix}"
	#echo -e "${green}13.${suffix}"
	echo -e "${red}\t0.${suffix}Quit"
	echo -e "\t——————————"

	echo
	echo
	read -e -p "	Enter a number:" act
	[[ -z ${act} ]] && act=0
	case "${act}" in
		0)
		Main_window
		;;
		1)
		Set_config_port
		Modify_config_port
		Add_iptables
		Del_iptables
		Save_iptables
		;;
		2)
		Set_config_password
		Modify_config_password
		;;
		3)
		Set_config_method
		Modify_config_method
		;;
		4)
		Set_config_protocol
		Modify_config_protocol
		;;
		5)
		Set_config_obfs
		Modigy_config_obfs
		;;
		*)
		Main_window
		;;
	esac
		
}





######
#test#
######


#写配置文件 覆盖原文件
function Write_configuration(){
	cat > ${config_user_file}<<-EOF
{
    "server": "0.0.0.0",
    "server_ipv6": "::",
    "server_port": ${ssr_port},
    "local_address": "127.0.0.1",
    "local_port": 1080,

    "password": "${ssr_password}",
    "method": "${ssr_method}",
    "protocol": "${ssr_protocol}",
    "protocol_param": "${ssr_protocol_param}",
    "obfs": "${ssr_obfs}",
    "obfs_param": "",
    "speed_limit_per_con": ${ssr_speed_limit_per_con},
    "speed_limit_per_user": ${ssr_speed_limit_per_user},

    "additional_ports" : {},
    "timeout": 120,
    "udp_timeout": 60,
    "dns_ipv6": false,
    "connect_verbose_info": 0,
    "redirect": "",
    "fast_open": false
}
EOF
}


#function Write_configuration_many(){}

#下载ssr服务端
function Download_SSR(){
	cd "/usr/local/"
	wget -N --no-check-certificate "https://github.com/Freshhand-j/Astep/raw/master/manyuser.zip"
	if [[ ! -e "manyuser.zip" ]]; then
		echo -e "${ERROR}ShadowsocksR download failed!Please retry.${suffix}" && rm -rf manyuser.zip && exit 1
	else
		echo -e "${INFO}Successfule download!${suffix}"
	fi
	[[ -e "manyuser.zip" ]] && unzip "manyuser.zip"
	[[ ! -e "/usr/local/shadowsocksr-manyuser/" ]] && echo -e "${ERROR}Unzip failed!${suffix}" && rm -rf manyuser.zip && exit 1
	mv "/usr/local/shadowsocksr-manyuser/" "/usr/local/shadowsocksr/"
	[[ ! -e "/usr/local/shadowsocksr/" ]] && echo -e "${ERROR}Rename failed!${suffix}" && rm -rf manyuser.zip && rm -rf "/usr/local/shadowsocksr-manyuser" && exit 1
	rm -rf manyuser.zip
	[[ -e ${config_folder} ]] && rm -rf ${config_folder}
	mkdir ${config_folder}
	[[ ! -e ${config_folder} ]] && echo -e "${ERROR}Configuration file builed failed!${suffix}" && exit 1
	echo -e "${INFO}Shadowsocksr server download complete!${suffix}"
}


#下载ssr管理脚本
function Service_SSR(){
	if ! wget -N --no-check-certificate "https://raw.githubusercontent.com/Freshhand-j/Astep/master/ssr_debian" -O /etc/init.d/ssr; then
		echo -e "${ERROR}Script download failed!${suffix}" && exit 1
	fi
	chmod +x /etc/init.d/ssr
	
	#开机启动
	update-rc.d -r ssr defaults
	
	echo -e "${INFO}Script downloaded successfully${suffix}"
}


#卸载SSR
function Uninstall_SSR(){
	echo
	echo
	echo -e "${NOTICE}Are u sure to uninstall SSR [y/N]${suffix}"
	read -ep "(default n):" uninstall_yn
	[[ -z ${uninstall_yn} ]] && uninstall="n" && Main_window
	if [[ ${uninstall_yn} == [Yy] ]]; then
		#删除防火墙规则
		port=`${jq_file} '.server_port' ${config_user_file}`
		Del_iptables
		Save_iptables
		#echo "1"
		#删除开机启动
		update-rc.d -f ssr remove
		#echo "2"
		#删除下载文件	
		rm -rf ${ssr_folder}
		#echo "3"
		rm -rf ${config_folder}
		#echo "4"
		rm -rf ${ssr_manage_file}
		#echo "5"

	fi
	if [[ ! -e ${ssr_folder} ]] && [[ ! -e ${config_folder} ]] && [[ ! -e ${ssr_manage_file} ]]; then
		echo -e "${INFO}Uninstallation successful!${suffix}"
	fi
	sleep 2
	Main_window

} 

#重命名jq命令
function JQ_install(){
	if [[ ! -e ${jq_file} ]]; then
		cd "${ssr_folder}"
		if [[ ${bit} == "x86_64" ]]; then
			mv "jq-linux64" "jq"
		else
			mv "jq-linux32" "jq"
		fi
		[[ ! -e ${jq_file} ]] && echo -e "${ERROR}JQ resolver rename failed!${suffix}"
		chmod +x ${jq_file}
		echo -e "${INFO}JQ resolver download success,continue..."
	else
		echo -e "${INFO}JQ resolver exisit,continue..."
	fi
}





#安装依赖组件
function dependency_install(){
		#apt-get update
		apt-get install -y vim unzip net-tools

		[[ ! -e "/usr/bin/unzip" ]] && echo -e "${ERROR}Dependency unzip installation failed!Please retry.${suffix}" && exit 1
		#------------------check python----------------------#
		python_exist=`python -h`
		if [[ -z "${python_exist}" ]]; then
			echo -e "${NOTICE}Python is not installed,start installation...${suffix}" && apt-get install -y python
		else
			echo -e "${INFO}Python has been installed${suffix}"
			echo "---------------"
			`python --version` 
			echo "---------------"
		fi
		#------------------check python----------------------#

		#\cp -f /user/share/zoneinfo/Asia/Shanghai /etc/locatime
				
}


#安装SSR
function Install_SSR(){
	Check_root
	[[ -e ${config_user_file} ]] && echo -e "${ERROR}ShadowsocksR configuration exist,Please check!${suffix}" && exit 1
	[[ -e ${ssr_folder} ]] && echo -e "${ERROR}ShadowsocksR configuration exist,Please check!${suffix}" && exit 1
	
	#开始安装
	echo -e "${INFO}Start setting ShadowsocksR account configuration...${suffix}"
	Set_all_config
	#安装依赖组件
	echo -e "${INFO}Start installing denpendency...${suffix}"
	dependency_install
	
	#下载安装Shadowsocksr文件-manyuser.zip
	echo -e "${INFO}Start downloading ShadowsocksR file...${suffix}"
	Download_SSR
	
	#下载安装ShadowsocksR服务脚本-ssr-ssr_manage
	echo -e "${INFO}Start downloading ShadowsocksR init script...${suffix}"
	Service_SSR
	
	#下载安装jq解析器
	echo -e "${INFO}Staring downloading JQ_parser...${suffix}"
	JQ_install

	#写入配置文件
	echo -e "${INFO}Start writing configuration file...${suffix}"
	Write_configuration

	#设置iptables防火墙
	echo -e "${INFO}Start setting iptables firewall...${suffix}"
	Set_iptables
	
	#设置防火墙规则
	echo -e "${INFO}Start setting iptables firewall rules...${suffix}"
	Add_iptables
	
	#保存防火墙规则
	echo -e "${INFO}Start saving iptables firewall rules...${suffix}"
	Save_iptables

	#安装设置完毕，启动服务
	echo -e "${INFO}Installation/Setup complete,start shadowsocksR service${suffix}"
	Start_SSR
}

#启动Shadowsocksr
Start_SSR(){
	SSR_installation_status
	Check_pid
	[[ ! -z ${PID} ]] && echo -e "${Error} ShadowsocksR running !"
	/etc/init.d/ssr start
	Check_pid
	[[ ! -z ${PID} ]] && View_User && sleep 5
}
Stop_SSR(){
	SSR_installation_status
	Check_pid
	[[ -z ${PID} ]] && echo -e "${Error} ShadowsocksR not running !" && exit 1
	/etc/init.d/ssr stop
}
Restart_SSR(){
	SSR_installation_status
	Check_pid
	[[ ! -z ${PID} ]] && /etc/init.d/ssr stop
	/etc/init.d/ssr start
	check_pid
	[[ ! -z ${PID} ]] && View_User
}


#查看日志
function View_log(){
	SSR_installation_status
	[[ ! -e ${ssr_log_file} ]] && echo -e "${Error} ShadowsocksR日志文件不存在 !" && exit 1
	cat "${ssr_log_file}"
	sleep 5
}



#更新脚本
function Update_Script(){
	echo
	echo
	wget -N --no-check-certificate https://raw.githubusercontent.com/Freshhand-j/Astep/master/work && chmod +x work && bash work
	echo -e "${INFO}已更新到最新版本（覆盖运行）${suffix}"

}
















function Main_window(){

	while true
	do
	clear
	Check_sys
	[[ ${release} != "ubuntu" ]] && echo -e "${ERROR}Ubuntu only${suffix}"
	echo	
	echo	
	echo
	echo
	echo
	echo -e "\t\tShadowsocksR Management Script"
	echo -e "		\t\t--Version:[${blue}V${version}${suffix}]--Author:[${blue}wwj${suffix}]"

	echo -e "\t——————————————"
		echo -e "${green}\t1.${suffix}Install ShadowsocksR"

		echo -e "${green}\t2.${suffix}Start ShadowsocksR"

		echo -e "${green}\t3.${suffix}Stop ShadowsocksR"

	echo -e "\t——————————————"

		echo -e "${green}\t4.${suffix}Restart ShadowsocksR"

		echo -e "${green}\t5.${suffix}Modify configuration"

		echo -e "${green}\t6.${suffix}View all information"

	echo -e "\t——————————————"

		echo -e "${green}\t7.${suffix}Uninstall SSR"

		echo -e "${green}\t8.${suffix}Other functions"

		echo -e "${red}\t0.${suffix}Quit"
	
	echo -e "\t——————————————"


	#echo -e "${green}.${suffix}Uninstall ShadowsocksR"
	#echo -e "${green}.${suffix}Install libsodium"
	#echo -e "${green}.${suffix}Show connectiong infomation"
	#echo -e "${green}.${suffix}手动 修改配置"
	#echo -e "${green}.${suffix}切换 端口模式"
	#echo -e "${green}.${suffix}停止 ShadowsocksR"
	#echo -e "${green}.${suffix}重启 ShadowsocksR"
	#echo -e "${green}.${suffix}查看日志"
	#echo -e "${green}.${suffix}升级"
	#echo -e "${green}.${suffix}重启"

	echo
	echo
	read -e -p "	Enter a number[0-8]:" choice
	case "${choice}" in
		0)
		exit 1
		;;
		1)
		Install_SSR
		;;
		2)
		Start_SSR
		;;
		3)
		Stop_SSR
		;;
		4)
		Restart_SSR
		;;
		5)
		Modify_config
		;;
		6)
		View_User
		sleep 10
		;;
		7)
		Uninstall_SSR
		;;
		8)
			clear
			echo	
			echo	
			echo
			echo
			#echo -e "${NOTICE}以下功能暂未实现！${suffix}" && echo
			echo && echo -e "\t   Option Menu"
	echo -e "\t——————————"
			echo -e "${green}\t1.${suffix}更新 ShadowsocksR"

			echo -e "${green}\t2.${suffix}卸载 ShadowsocksR"
	echo -e "\t——————————"
			echo -e "${green}\t3.${suffix}安装 libsodium"

			echo -e "${green}\t4.${suffix}显示 连接信息"
	echo -e "\t——————————"
			echo -e "${green}\t5.${suffix}查看 日志"

			echo -e "${green}\t6.${suffix}升级"
	echo -e "\t——————————"
			echo -e "${red}\t0.${suffix}返回上一级"
			
			echo
			echo

			read -e -p "请输入数字[0-6]:" choice_addition
			case "${choice_addition}" in
				0)
				Main_window
				;;
				1)
				echo -e "ShadowsocksR 已停止更新"
				;;
				2)
				Uninstall_SSR
				;;
				3)
				echo -e "${NOTICE}该功能 未开放${suffix}"
				;;
				4)
				echo -e "${NOTICE}该功能 未开放${suffix}"
				;;
				5)
				View_log
				;;
				6)
				Update_Script
				;;
				*)
				echo -e "${ERROR}请输入正确的数字！${suffix}"
				;;
			esac
			;;
		*)
		echo -e "${ERROR}\t请输入正确的数字${suffix}"
		;;
	esac
	done

}

Main_window


